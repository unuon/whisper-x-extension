"use strict";var x=Object.create;var c=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var D=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty;var G=(r,e)=>()=>(r&&(e=r(r=0)),e);var f=(r,e)=>{for(var o in e)c(r,o,{get:e[o],enumerable:!0})},m=(r,e,o,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of k(e))!O.call(r,n)&&n!==o&&c(r,n,{get:()=>e[n],enumerable:!(s=B(e,n))||s.enumerable});return r};var q=(r,e,o)=>(o=r!=null?x(D(r)):{},m(e||!r||!r.__esModule?c(o,"default",{value:r,enumerable:!0}):o,r)),F=r=>m(c({},"__esModule",{value:!0}),r);var z={};f(z,{WHISPER_MODELS:()=>d,getAvailableModels:()=>M,getEnglishOnlyModels:()=>W,getModelInfo:()=>j,getMultilingualModels:()=>w,getRecommendedModels:()=>y});function j(r){return d.find(e=>e.name===r)}function M(){return d.map(r=>r.name)}function y(){return d.filter(r=>r.recommended)}function W(){return d.filter(r=>r.englishOnly)}function w(){return d.filter(r=>!r.englishOnly)}var d,g=G(()=>{"use strict";d=[{name:"tiny",size:"~75 MB",description:"Fastest, least accurate. Good for quick testing.",englishOnly:!1,recommended:!1},{name:"tiny.en",size:"~75 MB",description:"Fastest, English-only. Good for quick English transcription.",englishOnly:!0,recommended:!1},{name:"base",size:"~142 MB",description:"Fast and decent accuracy. Good balance for multilingual.",englishOnly:!1,recommended:!0},{name:"base.en",size:"~142 MB",description:"Fast and decent accuracy. Good balance for English.",englishOnly:!0,recommended:!0},{name:"small",size:"~466 MB",description:"Better accuracy, slower processing. Good for quality multilingual transcription.",englishOnly:!1,recommended:!1},{name:"small.en",size:"~466 MB",description:"Better accuracy, slower processing. Good for quality English transcription.",englishOnly:!0,recommended:!1},{name:"medium",size:"~1.5 GB",description:"High accuracy, requires more resources. Professional multilingual transcription.",englishOnly:!1,recommended:!1},{name:"medium.en",size:"~1.5 GB",description:"High accuracy, requires more resources. Professional English transcription.",englishOnly:!0,recommended:!1},{name:"large-v1",size:"~3 GB",description:"Highest accuracy, very slow. For best quality multilingual transcription.",englishOnly:!1,recommended:!1},{name:"large",size:"~3 GB",description:"Highest accuracy, very slow. Latest large model.",englishOnly:!1,recommended:!1},{name:"large-v3-turbo",size:"~1.6 GB",description:"Fast large model with good accuracy. Best overall for production use.",englishOnly:!1,recommended:!0}]});var L={};f(L,{WHISPER_MODELS:()=>d,WhisperX:()=>l,default:()=>v,deleteModel:()=>P,downloadModel:()=>E,downloadModelInternal:()=>I,getAvailableModels:()=>M,getEnglishOnlyModels:()=>W,getModelInfo:()=>X,getMultilingualModels:()=>w,getRecommendedModels:()=>y,listAvailableModels:()=>S,listInstalledModels:()=>$,main:()=>H});module.exports=F(L);var u=q(require("path"),1),h=require("child_process"),a=require("fs"),l=class{isModelInstalled(e){let o=this.getModelPath(e);return(0,a.existsSync)(o)}getModelPath(e){let o=u.default.join(process.cwd(),"node_modules","nodejs-whisper","cpp","whisper.cpp","models");return u.default.join(o,`ggml-${e}.bin`)}getModelsDirectory(){return u.default.join(process.cwd(),"node_modules","nodejs-whisper","cpp","whisper.cpp","models")}async downloadModel(e){try{if(console.log(`[WhisperX] Downloading model: ${e}`),this.isModelInstalled(e))return console.log(`[WhisperX] Model ${e} is already installed`),!0;let o=this.getModelsDirectory(),s=`bash download-ggml-model.sh ${e}`;if(console.log(`[WhisperX] Starting download of ${e}...`),console.log("[WhisperX] This may take several minutes depending on model size"),console.log("[WhisperX] Progress will be shown below:"),console.log(),(0,h.execSync)(s,{stdio:"inherit",cwd:o,shell:"/bin/bash"}),this.isModelInstalled(e)){let n=this.getModelSize(e),t=n?this.formatSize(n):"Unknown";return console.log(`[WhisperX] Successfully downloaded model: ${e} (${t})`),!0}else return console.error("[WhisperX] Model file not found after download"),!1}catch(o){return console.error(`[WhisperX] Error downloading model ${e}:`,o),!1}}async deleteModel(e){try{let o=this.getModelPath(e);return(0,a.existsSync)(o)?(console.log(`[WhisperX] Deleting model: ${e}`),(0,h.execSync)(`rm -f "${o}"`,{stdio:"inherit"}),console.log(`[WhisperX] Successfully deleted model: ${e}`),!0):(console.log(`[WhisperX] Model ${e} is not installed`),!1)}catch(o){return console.error(`[WhisperX] Error deleting model ${e}:`,o),!1}}listInstalledModels(){try{let e=this.getModelsDirectory();return(0,a.existsSync)(e)?(0,a.readdirSync)(e).filter(n=>n.startsWith("ggml-")&&n.endsWith(".bin")).map(n=>n.replace("ggml-","").replace(".bin","")):[]}catch(e){return console.error("[WhisperX] Error listing models:",e),[]}}getModelSize(e){try{let o=this.getModelPath(e);return(0,a.existsSync)(o)?(0,a.statSync)(o).size:null}catch(o){return console.error("[WhisperX] Error getting model size:",o),null}}formatSize(e){let o=["Bytes","KB","MB","GB"];if(e===0)return"0 Bytes";let s=Math.floor(Math.log(e)/Math.log(1024));return Math.round(e/Math.pow(1024,s)*100)/100+" "+o[s]}getInstalledModelsInfo(){return this.listInstalledModels().map(o=>{let s=this.getModelSize(o);return{name:o,size:s?this.formatSize(s):"Unknown",path:this.getModelPath(o)}})}};g();var v=l;async function X(r,e){r.stopPropagation();try{console.log(`[WhisperX] Getting info for model: ${e}`);let o=new l,s=o.isModelInstalled(e),n=o.getModelPath(e),t=null;if(s){let i=o.getModelSize(e);t=i?o.formatSize(i):null}return{ok:!0,data:{modelName:e,isInstalled:s,path:n,size:t}}}catch(o){return console.error("[WhisperX] Error getting model info:",o),{ok:!1,error:o instanceof Error?o.message:String(o)}}}async function S(r){r.stopPropagation();try{console.log("[WhisperX] Listing available models");let{WHISPER_MODELS:e}=await Promise.resolve().then(()=>(g(),z));return{ok:!0,data:{models:e}}}catch(e){return console.error("[WhisperX] Error listing available models:",e),{ok:!1,error:e instanceof Error?e.message:String(e)}}}async function $(r){r.stopPropagation();try{return console.log("[WhisperX] Listing installed models"),{ok:!0,data:{models:new l().getInstalledModelsInfo()}}}catch(e){return console.error("[WhisperX] Error listing installed models:",e),{ok:!1,error:e instanceof Error?e.message:String(e)}}}async function I(r,e,o){let s=!1;function n(t,i,p=!1){s||(s=!0,console.log(`[WhisperX] ${i}`),setTimeout(()=>{o.sender.send(r,{type:"completion",data:{log:i,exitCode:t?0:1,controllerId:r,modelName:e}})},100))}try{console.log(`[WhisperX] Starting model download: ${e}`),o.sender.send(r,{type:"progress",data:{log:`Downloading model: ${e}`,progress:0,controllerId:r,modelName:e}});let t=new l;if(t.isModelInstalled(e))return n(!0,`Model ${e} is already installed`,!0),{success:!0,modelName:e,alreadyInstalled:!0};if(await t.downloadModel(e)){let p=t.getModelSize(e),b=p?t.formatSize(p):"Unknown size";return n(!0,`Model ${e} downloaded successfully (${b})`),{success:!0,modelName:e}}else return n(!1,`Failed to download model: ${e}`),{success:!1,modelName:e,error:"Download failed"}}catch(t){let i=t instanceof Error?t.message:String(t);return n(!1,`Error downloading model: ${i}`),{success:!1,modelName:e,error:i}}}async function E(r,e,o){let{modelName:s}=o;r.stopPropagation();let{invokeEvent:n}=r;console.log(`[WhisperX] Download request: ${e} -> ${s}`);let t=await I(e,s,n);return{downloadId:e,controllerId:e,result:t}}async function P(r,e){let{modelName:o}=e;r.stopPropagation();try{console.log(`[WhisperX] Delete request: ${o}`);let s=new l;return s.isModelInstalled(o)?await s.deleteModel(o)?(console.log(`[WhisperX] Successfully deleted model: ${o}`),{ok:!0,data:{modelName:o,message:`Model ${o} deleted successfully`}}):{ok:!1,data:{modelName:o,error:"Failed to delete model"}}:(console.log(`[WhisperX] Model ${o} is not installed`),{ok:!1,data:{modelName:o,notFound:!0,message:`Model ${o} is not installed`}})}catch(s){return console.error("[WhisperX] Error deleting model:",s),{ok:!1,error:s instanceof Error?s.message:String(s)}}}function H({events:r}){r.on("whisperx:getModelInfo",X,-10),r.on("whisperx:listAvailable",S,-10),r.on("whisperx:listInstalled",$,-10),r.on("whisperx:downloadModel",E,-10),r.on("whisperx:deleteModel",P,-10)}0&&(module.exports={WHISPER_MODELS,WhisperX,deleteModel,downloadModel,downloadModelInternal,getAvailableModels,getEnglishOnlyModels,getModelInfo,getMultilingualModels,getRecommendedModels,listAvailableModels,listInstalledModels,main});
