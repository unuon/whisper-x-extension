"use strict";var q=Object.create;var h=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var H=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var A=(r,e)=>()=>(r&&(e=r(r=0)),e);var w=(r,e)=>{for(var s in e)h(r,s,{get:e[s],enumerable:!0})},W=(r,e,s,l)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of F(e))!j.call(r,o)&&o!==s&&h(r,o,{get:()=>e[o],enumerable:!(l=v(e,o))||l.enumerable});return r};var z=(r,e,s)=>(s=r!=null?q(H(r)):{},W(e||!r||!r.__esModule?h(s,"default",{value:r,enumerable:!0}):s,r)),C=r=>W(h({},"__esModule",{value:!0}),r);var m={};w(m,{WHISPER_MODELS:()=>g,getAvailableModels:()=>S,getEnglishOnlyModels:()=>P,getModelInfo:()=>L,getMultilingualModels:()=>E,getRecommendedModels:()=>$});function L(r){return g.find(e=>e.name===r)}function S(){return g.map(r=>r.name)}function $(){return g.filter(r=>r.recommended)}function P(){return g.filter(r=>r.englishOnly)}function E(){return g.filter(r=>!r.englishOnly)}var g,f=A(()=>{"use strict";g=[{name:"tiny",size:"~75 MB",description:"Fastest, least accurate. Good for quick testing.",englishOnly:!1,recommended:!1},{name:"tiny.en",size:"~75 MB",description:"Fastest, English-only. Good for quick English transcription.",englishOnly:!0,recommended:!1},{name:"base",size:"~142 MB",description:"Fast and decent accuracy. Good balance for multilingual.",englishOnly:!1,recommended:!0},{name:"base.en",size:"~142 MB",description:"Fast and decent accuracy. Good balance for English.",englishOnly:!0,recommended:!0},{name:"small",size:"~466 MB",description:"Better accuracy, slower processing. Good for quality multilingual transcription.",englishOnly:!1,recommended:!1},{name:"small.en",size:"~466 MB",description:"Better accuracy, slower processing. Good for quality English transcription.",englishOnly:!0,recommended:!1},{name:"medium",size:"~1.5 GB",description:"High accuracy, requires more resources. Professional multilingual transcription.",englishOnly:!1,recommended:!1},{name:"medium.en",size:"~1.5 GB",description:"High accuracy, requires more resources. Professional English transcription.",englishOnly:!0,recommended:!1},{name:"large-v1",size:"~3 GB",description:"Highest accuracy, very slow. For best quality multilingual transcription.",englishOnly:!1,recommended:!1},{name:"large",size:"~3 GB",description:"Highest accuracy, very slow. Latest large model.",englishOnly:!1,recommended:!1},{name:"large-v3-turbo",size:"~1.6 GB",description:"Fast large model with good accuracy. Best overall for production use.",englishOnly:!1,recommended:!0}]});var T={};w(T,{WHISPER_MODELS:()=>g,WhisperX:()=>i,default:()=>R,deleteModel:()=>G,downloadModel:()=>O,downloadModelInternal:()=>k,getAvailableModels:()=>S,getBaseDirectory:()=>U,getEnglishOnlyModels:()=>P,getModelInfo:()=>b,getMultilingualModels:()=>E,getRecommendedModels:()=>$,listAvailableModels:()=>D,listInstalledModels:()=>B,main:()=>_,setBaseDirectory:()=>x});module.exports=C(T);var p=z(require("path"),1),X=require("child_process"),a=require("fs"),I=z(require("os"),1),i=class{baseDirectory;constructor(e){this.baseDirectory=e||process.cwd()}isModelInstalled(e){let s=this.getModelPath(e);return(0,a.existsSync)(s)}getModelPath(e){let s=this.getModelsDirectory();return p.default.join(s,`ggml-${e}.bin`)}getModelsDirectory(){return p.default.join(this.baseDirectory,"node_modules","nodejs-whisper","cpp","whisper.cpp","models")}async downloadModel(e){try{if(console.log(`[WhisperX] Downloading model: ${e}`),this.isModelInstalled(e))return console.log(`[WhisperX] Model ${e} is already installed`),!0;let s=this.getModelsDirectory(),l=I.default.platform()==="win32",o,t;if(l){let n=p.default.join(s,"download-ggml-model.cmd");o=`download-ggml-model.cmd ${e}`,t="cmd.exe"}else o=`bash download-ggml-model.sh ${e}`,t="/bin/bash";if(console.log(`[WhisperX] Platform: ${l?"Windows":"Unix-like"}`),console.log(`[WhisperX] Starting download of ${e}...`),console.log("[WhisperX] This may take several minutes depending on model size"),console.log("[WhisperX] Progress will be shown below:"),console.log(),(0,X.execSync)(o,{stdio:"inherit",cwd:s,shell:t}),this.isModelInstalled(e)){let n=this.getModelSize(e),c=n?this.formatSize(n):"Unknown";return console.log(`[WhisperX] Successfully downloaded model: ${e} (${c})`),!0}else return console.error("[WhisperX] Model file not found after download"),!1}catch(s){return console.error(`[WhisperX] Error downloading model ${e}:`,s),!1}}async deleteModel(e){try{let s=this.getModelPath(e);return(0,a.existsSync)(s)?(console.log(`[WhisperX] Deleting model: ${e}`),(0,a.unlinkSync)(s),console.log(`[WhisperX] Successfully deleted model: ${e}`),!0):(console.log(`[WhisperX] Model ${e} is not installed`),!1)}catch(s){return console.error(`[WhisperX] Error deleting model ${e}:`,s),!1}}listInstalledModels(){try{let e=this.getModelsDirectory();return(0,a.existsSync)(e)?(0,a.readdirSync)(e).filter(o=>o.startsWith("ggml-")&&o.endsWith(".bin")).map(o=>o.replace("ggml-","").replace(".bin","")):[]}catch(e){return console.error("[WhisperX] Error listing models:",e),[]}}getModelSize(e){try{let s=this.getModelPath(e);return(0,a.existsSync)(s)?(0,a.statSync)(s).size:null}catch(s){return console.error("[WhisperX] Error getting model size:",s),null}}formatSize(e){let s=["Bytes","KB","MB","GB"];if(e===0)return"0 Bytes";let l=Math.floor(Math.log(e)/Math.log(1024));return Math.round(e/Math.pow(1024,l)*100)/100+" "+s[l]}getInstalledModelsInfo(){return this.listInstalledModels().map(s=>{let l=this.getModelSize(s);return{name:s,size:l?this.formatSize(l):"Unknown",path:this.getModelPath(s)}})}};f();var R=i,d;function x(r){d=r,console.log(`[WhisperX] Base directory set to: ${r}`)}function U(){return d}async function b(r,e){r.stopPropagation();try{console.log(`[WhisperX] Getting info for model: ${e}`);let s=new i(d),l=s.isModelInstalled(e),o=s.getModelPath(e),t=null;if(l){let n=s.getModelSize(e);t=n?s.formatSize(n):null}return{ok:!0,data:{modelName:e,isInstalled:l,path:o,size:t}}}catch(s){return console.error("[WhisperX] Error getting model info:",s),{ok:!1,error:s instanceof Error?s.message:String(s)}}}async function D(r){r.stopPropagation();try{console.log("[WhisperX] Listing available models");let{WHISPER_MODELS:e}=await Promise.resolve().then(()=>(f(),m));return{ok:!0,data:{models:e}}}catch(e){return console.error("[WhisperX] Error listing available models:",e),{ok:!1,error:e instanceof Error?e.message:String(e)}}}async function B(r){r.stopPropagation();try{return console.log("[WhisperX] Listing installed models"),{ok:!0,data:{models:new i(d).getInstalledModelsInfo()}}}catch(e){return console.error("[WhisperX] Error listing installed models:",e),{ok:!1,error:e instanceof Error?e.message:String(e)}}}async function k(r,e,s){let l=!1;function o(t,n,c=!1){l||(l=!0,console.log(`[WhisperX] ${n}`),setTimeout(()=>{s.sender.send(r,{type:"completion",data:{log:n,exitCode:t?0:1,controllerId:r,modelName:e}})},100))}try{console.log(`[WhisperX] Starting model download: ${e}`),s.sender.send(r,{type:"progress",data:{log:`Downloading model: ${e}`,progress:0,controllerId:r,modelName:e}});let t=new i(d);if(t.isModelInstalled(e))return o(!0,`Model ${e} is already installed`,!0),{success:!0,modelName:e,alreadyInstalled:!0};if(await t.downloadModel(e)){let c=t.getModelSize(e),u=c?t.formatSize(c):"Unknown size";return o(!0,`Model ${e} downloaded successfully (${u})`),{success:!0,modelName:e}}else return o(!1,`Failed to download model: ${e}`),{success:!1,modelName:e,error:"Download failed"}}catch(t){let n=t instanceof Error?t.message:String(t);return o(!1,`Error downloading model: ${n}`),{success:!1,modelName:e,error:n}}}async function O(r,e,s){let{modelName:l}=s;r.stopPropagation();let{invokeEvent:o}=r;console.log(`[WhisperX] Download request: ${e} -> ${l}`);let t=await k(e,l,o);return{downloadId:e,controllerId:e,result:t}}async function G(r,e){let{modelName:s}=e;r.stopPropagation();try{console.log(`[WhisperX] Delete request: ${s}`);let l=new i(d);return l.isModelInstalled(s)?await l.deleteModel(s)?(console.log(`[WhisperX] Successfully deleted model: ${s}`),{ok:!0,data:{modelName:s,message:`Model ${s} deleted successfully`}}):{ok:!1,data:{modelName:s,error:"Failed to delete model"}}:(console.log(`[WhisperX] Model ${s} is not installed`),{ok:!1,data:{modelName:s,notFound:!0,message:`Model ${s} is not installed`}})}catch(l){return console.error("[WhisperX] Error deleting model:",l),{ok:!1,error:l instanceof Error?l.message:String(l)}}}function _({events:r,channels:e,electron:{ipcMain:s},api:l}){if(l?.getAppPath)try{let o=l.getAppPath();x(o)}catch{console.warn("[WhisperX] Could not get app path, using process.cwd()")}r.on("whisperx:getModelInfo",b,-10),r.on("whisperx:listAvailable",D,-10),r.on("whisperx:listInstalled",B,-10),r.on("whisperx:downloadModel",O,-10),r.on("whisperx:deleteModel",G,-10),s.handle(e.register("whisperx:getModelInfo"),async(o,t)=>{try{let n=new i(d),c=n.isModelInstalled(t),u=n.getModelPath(t),y=null;if(c){let M=n.getModelSize(t);y=M?n.formatSize(M):null}return{success:!0,data:{modelName:t,isInstalled:c,path:u,size:y}}}catch(n){return console.error("[WhisperX] Error getting model info:",n),{success:!1,error:n.message}}}),s.handle(e.register("whisperx:listAvailable"),async()=>{try{let{WHISPER_MODELS:o}=await Promise.resolve().then(()=>(f(),m));return{success:!0,models:o}}catch(o){return console.error("[WhisperX] Error listing available models:",o),{success:!1,error:o.message}}}),s.handle(e.register("whisperx:listInstalled"),async()=>{try{return{success:!0,models:new i(d).getInstalledModelsInfo()}}catch(o){return console.error("[WhisperX] Error listing installed models:",o),{success:!1,error:o.message}}}),s.handle(e.register("whisperx:downloadModel"),async(o,t)=>{try{console.log(`[WhisperX] IPC download request: ${t}`);let n=new i(d);if(n.isModelInstalled(t)){let u=n.getModelSize(t);return{success:!0,alreadyInstalled:!0,message:`Model ${t} is already installed`,size:u?n.formatSize(u):null}}if(await n.downloadModel(t)){let u=n.getModelSize(t);return{success:!0,message:`Model ${t} downloaded successfully`,size:u?n.formatSize(u):null}}else return{success:!1,error:"Download failed"}}catch(n){return console.error("[WhisperX] Error downloading model:",n),{success:!1,error:n.message}}}),s.handle(e.register("whisperx:deleteModel"),async(o,t)=>{try{console.log(`[WhisperX] IPC delete request: ${t}`);let n=new i(d);return n.isModelInstalled(t)?await n.deleteModel(t)?{success:!0,message:`Model ${t} deleted successfully`}:{success:!1,error:"Failed to delete model"}:{success:!1,notFound:!0,message:`Model ${t} is not installed`}}catch(n){return console.error("[WhisperX] Error deleting model:",n),{success:!1,error:n.message}}}),console.log("[WhisperX] Extension initialized with event handlers and IPC handlers")}0&&(module.exports={WHISPER_MODELS,WhisperX,deleteModel,downloadModel,downloadModelInternal,getAvailableModels,getBaseDirectory,getEnglishOnlyModels,getModelInfo,getMultilingualModels,getRecommendedModels,listAvailableModels,listInstalledModels,main,setBaseDirectory});
