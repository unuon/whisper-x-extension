"use strict";var B=Object.create;var h=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,G=Object.prototype.hasOwnProperty;var q=(r,e)=>()=>(r&&(e=r(r=0)),e);var y=(r,e)=>{for(var s in e)h(r,s,{get:e[s],enumerable:!0})},w=(r,e,s,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of O(e))!G.call(r,o)&&o!==s&&h(r,o,{get:()=>e[o],enumerable:!(t=D(e,o))||t.enumerable});return r};var F=(r,e,s)=>(s=r!=null?B(k(r)):{},w(e||!r||!r.__esModule?h(s,"default",{value:r,enumerable:!0}):s,r)),v=r=>w(h({},"__esModule",{value:!0}),r);var M={};y(M,{WHISPER_MODELS:()=>c,getAvailableModels:()=>W,getEnglishOnlyModels:()=>X,getModelInfo:()=>j,getMultilingualModels:()=>I,getRecommendedModels:()=>z});function j(r){return c.find(e=>e.name===r)}function W(){return c.map(r=>r.name)}function z(){return c.filter(r=>r.recommended)}function X(){return c.filter(r=>r.englishOnly)}function I(){return c.filter(r=>!r.englishOnly)}var c,g=q(()=>{"use strict";c=[{name:"tiny",size:"~75 MB",description:"Fastest, least accurate. Good for quick testing.",englishOnly:!1,recommended:!1},{name:"tiny.en",size:"~75 MB",description:"Fastest, English-only. Good for quick English transcription.",englishOnly:!0,recommended:!1},{name:"base",size:"~142 MB",description:"Fast and decent accuracy. Good balance for multilingual.",englishOnly:!1,recommended:!0},{name:"base.en",size:"~142 MB",description:"Fast and decent accuracy. Good balance for English.",englishOnly:!0,recommended:!0},{name:"small",size:"~466 MB",description:"Better accuracy, slower processing. Good for quality multilingual transcription.",englishOnly:!1,recommended:!1},{name:"small.en",size:"~466 MB",description:"Better accuracy, slower processing. Good for quality English transcription.",englishOnly:!0,recommended:!1},{name:"medium",size:"~1.5 GB",description:"High accuracy, requires more resources. Professional multilingual transcription.",englishOnly:!1,recommended:!1},{name:"medium.en",size:"~1.5 GB",description:"High accuracy, requires more resources. Professional English transcription.",englishOnly:!0,recommended:!1},{name:"large-v1",size:"~3 GB",description:"Highest accuracy, very slow. For best quality multilingual transcription.",englishOnly:!1,recommended:!1},{name:"large",size:"~3 GB",description:"Highest accuracy, very slow. Latest large model.",englishOnly:!1,recommended:!1},{name:"large-v3-turbo",size:"~1.6 GB",description:"Fast large model with good accuracy. Best overall for production use.",englishOnly:!1,recommended:!0}]});var L={};y(L,{WHISPER_MODELS:()=>c,WhisperX:()=>i,default:()=>H,deleteModel:()=>b,downloadModel:()=>x,downloadModelInternal:()=>P,getAvailableModels:()=>W,getEnglishOnlyModels:()=>X,getModelInfo:()=>S,getMultilingualModels:()=>I,getRecommendedModels:()=>z,listAvailableModels:()=>$,listInstalledModels:()=>E,main:()=>C});module.exports=v(L);var p=F(require("path"),1),f=require("child_process"),d=require("fs"),i=class{isModelInstalled(e){let s=this.getModelPath(e);return(0,d.existsSync)(s)}getModelPath(e){let s=p.default.join(process.cwd(),"node_modules","nodejs-whisper","cpp","whisper.cpp","models");return p.default.join(s,`ggml-${e}.bin`)}getModelsDirectory(){return p.default.join(process.cwd(),"node_modules","nodejs-whisper","cpp","whisper.cpp","models")}async downloadModel(e){try{if(console.log(`[WhisperX] Downloading model: ${e}`),this.isModelInstalled(e))return console.log(`[WhisperX] Model ${e} is already installed`),!0;let s=this.getModelsDirectory(),t=`bash download-ggml-model.sh ${e}`;if(console.log(`[WhisperX] Starting download of ${e}...`),console.log("[WhisperX] This may take several minutes depending on model size"),console.log("[WhisperX] Progress will be shown below:"),console.log(),(0,f.execSync)(t,{stdio:"inherit",cwd:s,shell:"/bin/bash"}),this.isModelInstalled(e)){let o=this.getModelSize(e),l=o?this.formatSize(o):"Unknown";return console.log(`[WhisperX] Successfully downloaded model: ${e} (${l})`),!0}else return console.error("[WhisperX] Model file not found after download"),!1}catch(s){return console.error(`[WhisperX] Error downloading model ${e}:`,s),!1}}async deleteModel(e){try{let s=this.getModelPath(e);return(0,d.existsSync)(s)?(console.log(`[WhisperX] Deleting model: ${e}`),(0,f.execSync)(`rm -f "${s}"`,{stdio:"inherit"}),console.log(`[WhisperX] Successfully deleted model: ${e}`),!0):(console.log(`[WhisperX] Model ${e} is not installed`),!1)}catch(s){return console.error(`[WhisperX] Error deleting model ${e}:`,s),!1}}listInstalledModels(){try{let e=this.getModelsDirectory();return(0,d.existsSync)(e)?(0,d.readdirSync)(e).filter(o=>o.startsWith("ggml-")&&o.endsWith(".bin")).map(o=>o.replace("ggml-","").replace(".bin","")):[]}catch(e){return console.error("[WhisperX] Error listing models:",e),[]}}getModelSize(e){try{let s=this.getModelPath(e);return(0,d.existsSync)(s)?(0,d.statSync)(s).size:null}catch(s){return console.error("[WhisperX] Error getting model size:",s),null}}formatSize(e){let s=["Bytes","KB","MB","GB"];if(e===0)return"0 Bytes";let t=Math.floor(Math.log(e)/Math.log(1024));return Math.round(e/Math.pow(1024,t)*100)/100+" "+s[t]}getInstalledModelsInfo(){return this.listInstalledModels().map(s=>{let t=this.getModelSize(s);return{name:s,size:t?this.formatSize(t):"Unknown",path:this.getModelPath(s)}})}};g();var H=i;async function S(r,e){r.stopPropagation();try{console.log(`[WhisperX] Getting info for model: ${e}`);let s=new i,t=s.isModelInstalled(e),o=s.getModelPath(e),l=null;if(t){let n=s.getModelSize(e);l=n?s.formatSize(n):null}return{ok:!0,data:{modelName:e,isInstalled:t,path:o,size:l}}}catch(s){return console.error("[WhisperX] Error getting model info:",s),{ok:!1,error:s instanceof Error?s.message:String(s)}}}async function $(r){r.stopPropagation();try{console.log("[WhisperX] Listing available models");let{WHISPER_MODELS:e}=await Promise.resolve().then(()=>(g(),M));return{ok:!0,data:{models:e}}}catch(e){return console.error("[WhisperX] Error listing available models:",e),{ok:!1,error:e instanceof Error?e.message:String(e)}}}async function E(r){r.stopPropagation();try{return console.log("[WhisperX] Listing installed models"),{ok:!0,data:{models:new i().getInstalledModelsInfo()}}}catch(e){return console.error("[WhisperX] Error listing installed models:",e),{ok:!1,error:e instanceof Error?e.message:String(e)}}}async function P(r,e,s){let t=!1;function o(l,n,a=!1){t||(t=!0,console.log(`[WhisperX] ${n}`),setTimeout(()=>{s.sender.send(r,{type:"completion",data:{log:n,exitCode:l?0:1,controllerId:r,modelName:e}})},100))}try{console.log(`[WhisperX] Starting model download: ${e}`),s.sender.send(r,{type:"progress",data:{log:`Downloading model: ${e}`,progress:0,controllerId:r,modelName:e}});let l=new i;if(l.isModelInstalled(e))return o(!0,`Model ${e} is already installed`,!0),{success:!0,modelName:e,alreadyInstalled:!0};if(await l.downloadModel(e)){let a=l.getModelSize(e),u=a?l.formatSize(a):"Unknown size";return o(!0,`Model ${e} downloaded successfully (${u})`),{success:!0,modelName:e}}else return o(!1,`Failed to download model: ${e}`),{success:!1,modelName:e,error:"Download failed"}}catch(l){let n=l instanceof Error?l.message:String(l);return o(!1,`Error downloading model: ${n}`),{success:!1,modelName:e,error:n}}}async function x(r,e,s){let{modelName:t}=s;r.stopPropagation();let{invokeEvent:o}=r;console.log(`[WhisperX] Download request: ${e} -> ${t}`);let l=await P(e,t,o);return{downloadId:e,controllerId:e,result:l}}async function b(r,e){let{modelName:s}=e;r.stopPropagation();try{console.log(`[WhisperX] Delete request: ${s}`);let t=new i;return t.isModelInstalled(s)?await t.deleteModel(s)?(console.log(`[WhisperX] Successfully deleted model: ${s}`),{ok:!0,data:{modelName:s,message:`Model ${s} deleted successfully`}}):{ok:!1,data:{modelName:s,error:"Failed to delete model"}}:(console.log(`[WhisperX] Model ${s} is not installed`),{ok:!1,data:{modelName:s,notFound:!0,message:`Model ${s} is not installed`}})}catch(t){return console.error("[WhisperX] Error deleting model:",t),{ok:!1,error:t instanceof Error?t.message:String(t)}}}function C({events:r,channels:e,electron:{ipcMain:s}}){r.on("whisperx:getModelInfo",S,-10),r.on("whisperx:listAvailable",$,-10),r.on("whisperx:listInstalled",E,-10),r.on("whisperx:downloadModel",x,-10),r.on("whisperx:deleteModel",b,-10),s.handle(e.register("whisperx:getModelInfo"),async(t,o)=>{try{let l=new i,n=l.isModelInstalled(o),a=l.getModelPath(o),u=null;if(n){let m=l.getModelSize(o);u=m?l.formatSize(m):null}return{success:!0,data:{modelName:o,isInstalled:n,path:a,size:u}}}catch(l){return console.error("[WhisperX] Error getting model info:",l),{success:!1,error:l.message}}}),s.handle(e.register("whisperx:listAvailable"),async()=>{try{let{WHISPER_MODELS:t}=await Promise.resolve().then(()=>(g(),M));return{success:!0,models:t}}catch(t){return console.error("[WhisperX] Error listing available models:",t),{success:!1,error:t.message}}}),s.handle(e.register("whisperx:listInstalled"),async()=>{try{return{success:!0,models:new i().getInstalledModelsInfo()}}catch(t){return console.error("[WhisperX] Error listing installed models:",t),{success:!1,error:t.message}}}),s.handle(e.register("whisperx:downloadModel"),async(t,o)=>{try{console.log(`[WhisperX] IPC download request: ${o}`);let l=new i;if(l.isModelInstalled(o)){let a=l.getModelSize(o);return{success:!0,alreadyInstalled:!0,message:`Model ${o} is already installed`,size:a?l.formatSize(a):null}}if(await l.downloadModel(o)){let a=l.getModelSize(o);return{success:!0,message:`Model ${o} downloaded successfully`,size:a?l.formatSize(a):null}}else return{success:!1,error:"Download failed"}}catch(l){return console.error("[WhisperX] Error downloading model:",l),{success:!1,error:l.message}}}),s.handle(e.register("whisperx:deleteModel"),async(t,o)=>{try{console.log(`[WhisperX] IPC delete request: ${o}`);let l=new i;return l.isModelInstalled(o)?await l.deleteModel(o)?{success:!0,message:`Model ${o} deleted successfully`}:{success:!1,error:"Failed to delete model"}:{success:!1,notFound:!0,message:`Model ${o} is not installed`}}catch(l){return console.error("[WhisperX] Error deleting model:",l),{success:!1,error:l.message}}}),console.log("[WhisperX] Extension initialized with event handlers and IPC handlers")}0&&(module.exports={WHISPER_MODELS,WhisperX,deleteModel,downloadModel,downloadModelInternal,getAvailableModels,getEnglishOnlyModels,getModelInfo,getMultilingualModels,getRecommendedModels,listAvailableModels,listInstalledModels,main});
